import sys
import srtm
import numpy as np
from math import radians, sin, cos, sqrt, atan2
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QGridLayout, QMessageBox
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import traceback

R = 6371000  # Радиус Земли в метрах

def haversine(coord1, coord2):
    lat1, lon1 = radians(coord1[1]), radians(coord1[0])
    lat2, lon2 = radians(coord2[1]), radians(coord2[0])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    return distance

def generate_intermediate_points(start, end, num_points):
    lats = np.linspace(start[1], end[1], num_points)
    lons = np.linspace(start[0], end[0], num_points)
    return list(zip(lons, lats))

class LineOfSightApp(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Расчет рельефа и прямой видимости")
        self.setGeometry(100, 100, 1200, 600)  

        # Основной лэйаут
        main_layout = QHBoxLayout()
        self.setLayout(main_layout)

        # Поле для графика (слева)
        plot_layout = QVBoxLayout()
        self.figure = Figure(figsize=(8, 6))
        self.canvas = FigureCanvas(self.figure)
        self.toolbar = NavigationToolbar(self.canvas, self) 
        plot_layout.addWidget(self.toolbar)
        plot_layout.addWidget(self.canvas)
        main_layout.addLayout(plot_layout, 7)

        # Лэйаут для ввода данных (справа)
        input_layout = QGridLayout()
        main_layout.addLayout(input_layout, 3)
        
        # Поля ввода данных
        input_layout.addWidget(QLabel("Начальная точка (долгота, широта):"), 0, 0)
        self.start_lon_entry = QLineEdit()
        self.start_lat_entry = QLineEdit()
        input_layout.addWidget(self.start_lon_entry, 0, 1)
        input_layout.addWidget(self.start_lat_entry, 0, 2)

        input_layout.addWidget(QLabel("Конечная точка (долгота, широта):"), 1, 0)
        self.end_lon_entry = QLineEdit()
        self.end_lat_entry = QLineEdit()
        input_layout.addWidget(self.end_lon_entry, 1, 1)
        input_layout.addWidget(self.end_lat_entry, 1, 2)

        input_layout.addWidget(QLabel("Высота антенны (м):"), 2, 0)
        self.antenna_height_entry = QLineEdit()
        input_layout.addWidget(self.antenna_height_entry, 2, 1)

        input_layout.addWidget(QLabel("Высота полета дрона (м):"), 3, 0)
        self.drone_height_entry = QLineEdit()
        input_layout.addWidget(self.drone_height_entry, 3, 1)

        input_layout.addWidget(QLabel("Количество промежуточных точек:"), 4, 0)
        self.num_points_entry = QLineEdit()
        input_layout.addWidget(self.num_points_entry, 4, 1)

        # Кнопка расчета
        self.calculate_button = QPushButton("Рассчитать")
        input_layout.addWidget(self.calculate_button, 5, 0, 1, 3)
        self.calculate_button.clicked.connect(self.calculate)

        # Поле для вывода результата
        self.result_label = QLabel("")
        input_layout.addWidget(self.result_label, 6, 0, 1, 3)

    def show_error(self, message):
        error_msg = QMessageBox()
        error_msg.setIcon(QMessageBox.Critical)
        error_msg.setText(message)
        error_msg.setWindowTitle("Ошибка")
        error_msg.exec_()


    def calculate(self):
        try:
            # Получение данных
            start = (float(self.start_lon_entry.text()), float(self.start_lat_entry.text()))
            end = (float(self.end_lon_entry.text()), float(self.end_lat_entry.text()))
            h = float(self.antenna_height_entry.text())
            h_dron = float(self.drone_height_entry.text())
            num_points = int(self.num_points_entry.text())

            # Загрузка данных рельефа
            elevation_data = srtm.get_data()
            elevation_data.get_elevation(0, 0) 

            # Генерация промежуточных точек
            intermediate_points = generate_intermediate_points(start, end, num_points)

            elevations = []
            distances = []
            total_distance = 0

            for i, point in enumerate(intermediate_points):
                try:
                    elevation = elevation_data.get_elevation(point[1], point[0])
                    elevations.append(elevation)

                    if i > 0:
                        prev_point = intermediate_points[i - 1]
                        distance = haversine(prev_point, point)
                        total_distance += distance
                    distances.append(total_distance)
                except Exception as e:
                    print(f"Ошибка при получении данных о высоте для точки {point}: {e}")
                    continue

            # Расчет дуги
            distance = haversine(start, end)
            angle = distance / R
            theta = np.linspace(np.pi / 2, np.pi / 2 - angle, num_points)
            x = R * np.cos(theta)
            y = R * np.sin(theta)

            elevation_x = (R + np.array(elevations)) * np.cos(theta)
            elevation_y = (R + np.array(elevations)) * np.sin(theta)

            Antena = h + elevation_y[1]
            Dron = h_dron + elevation_y[-1]

            Windows = Antena + 7500
            
            # Обновление графика
            self.figure.clear()
            ax = self.figure.add_subplot(111)
            ax.plot(x, y, label=f'Дуга длиной {distance / 1000:.2f} км')
            ax.plot(elevation_x, elevation_y, label="Рельеф", color='brown')
            ax.plot([-500, -500], [Windows, Windows+1], color='g')
            ax.plot([0, total_distance], [Antena, Dron], color='r', label="Прямая между начальной и конечной точками")
            ax.set_xlabel('Длина (м)')
            ax.set_ylabel('Высота (м)')
            ax.set_aspect('equal')
            ax.grid(True)
            self.canvas.draw()

            # Вывод результатов
            dv_anten = 1.06 * sqrt(h * (2 * R + h)) / 1000
            dv_dron = 1.06 * sqrt(h_dron * (2 * R + h_dron)) / 1000
            d = dv_anten + dv_dron

            self.result_label.setText(f"Расстояние: {distance / 1000:.2f} км\n"
                                      f"Дальность видимого горизонта антены: {dv_anten:.2f} км\n"
                                      f"Дальность видимого горизонта дрона: {dv_dron:.2f} км\n"
                                      f"Дальность прямой видимости: {d:.2f} км")

        except ValueError:
            self.show_error("Пожалуйста, введите корректные числовые значения.")
        except Exception as e:
         error_message = f"Произошла ошибка: {e}"
         self.show_error(error_message)
         print(f"Трассировка:\n{traceback.format_exc()}")



if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = LineOfSightApp()
    window.show()
    sys.exit(app.exec_())
